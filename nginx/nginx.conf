server { 
 listen 8082;
 server_name localhost;
#  location / {
#    # This would be the directory where your React app's static files are stored at
#    root /usr/share/nginx/html;
#    try_files $uri /index.html;
#  }

# luigid-service2.local is {service-discovery-service}.{service-discovery-namespace} - uses Route53 Service Discovery
# by setting it in a variable, $luigid-service, forces NGINX to honour the TTL specified in the Route 53 record and re-resolve when TTL expires
# https://aws.amazon.com/blogs/containers/load-balancing-amazon-ecs-services-with-a-kubernetes-ingress-controller-style-approach/
 location / {
   # This would be the directory where your React app's static files are stored at
   proxy_set_header X-Real-IP $remote_addr;
   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
   proxy_set_header X-NginX-Proxy true;
   set $luigidservice luigid-service2.local; 
   proxy_pass http://$luigidservice:8082;   
   proxy_ssl_session_reuse off;
   proxy_set_header Host $http_host;
   proxy_cache_bypass $http_upgrade;
   proxy_redirect off;
 } 
   #proxy_pass http://54.245.23.5:8082;
#  location /services/m {
#    proxy_set_header X-Real-IP $remote_addr;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-NginX-Proxy true;
#    proxy_pass http://backend:8080/services/m;
#    proxy_ssl_session_reuse off;
#    proxy_set_header Host $http_host;
#    proxy_cache_bypass $http_upgrade;
#    proxy_redirect off;
#  }
  resolver 10.0.0.2 valid=10s;
  # the default AWS Route53 DNS resolver is at the *.*.*.2 address: https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html
  # this presumes this task must be run in the 10.0.0.* subnet
}
